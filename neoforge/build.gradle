plugins {
    id 'java-library'
    id 'net.neoforged.gradle.userdev'
}

base {
    archivesName = "${mod_name}-neoforge"
}
version = "${minecraft_version}-${mod_version}"

repositories {
    maven {
        // Shedaniel's maven (Architectury API)
        url = "https://maven.architectury.dev"
        content {
            includeGroup "dev.architectury"
        }
    }

    maven {
        // saps.dev Maven (KubeJS and Rhino)
        url = "https://maven.saps.dev/minecraft"
        content {
            includeGroup "dev.latvian.mods"
        }
    }
}

runs {
    configureEach {
        workingDirectory project.file('../run')
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        systemProperty 'fml.earlyprogresswindow', 'false'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
//        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

dependencies {
    compileOnly project(":common")

    implementation "net.neoforged:neoforge:${neo_version}"

//    implementation fg.deobf("dev.latvian.mods:kubejs-forge:${kubejs_version}")
//    implementation fg.deobf("dev.latvian.mods:rhino-forge:${rhino_version}")
//    implementation fg.deobf("dev.architectury:architectury-forge:${architectury_version}")
}

tasks.named('test').configure {
    //Disable builtin test as we have JUnit enabled in Common
    enabled(false)
}

TaskCollection.metaClass.excludingNeoTasks = { ->
    delegate.matching { !it.name.startsWith("neo") }
}

tasks.withType(JavaCompile).excludingNeoTasks().configureEach {
    source(project(":common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).configureEach {
    from project(":common").sourceSets.main.resources
}

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
    runtimeClasspath.extendsFrom localRuntime
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version      : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            neo_version            : neo_version,
            neo_version_range      : neo_version_range,
            loader_version_range   : loader_version_range,
            mod_id                 : mod_id,
            mod_name               : mod_display_name,
            mod_license            : mod_license,
            mod_version            : mod_version,
            mod_authors            : mod_authors,
            mod_description        : mod_description
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/neoforge.mods.toml']) {
        expand replaceProperties
    }
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": mod_display_name,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": mod_display_name,
                "Implementation-Version": "${archiveVersion.get()}",
                "Implementation-Vendor" :mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task apiJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'api'

    include "hungteen/${mod_id}/api/**"

    // Sources included because of MinecraftForge/ForgeGradle#369
    from project(":common").sourceSets.main.allJava
    from(sourceSets.main.allJava)
    from(sourceSets.main.output)
}

artifacts {
    archives apiJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
//            artifact jar
//            artifact sourcesJar
//            artifact apiJar
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}