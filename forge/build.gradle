plugins {
    id("multiplatform-convention")

    alias(libs.plugins.forgegradle)
    alias(libs.plugins.mixin)
    alias(libs.plugins.modpublish)
}

version = modVersion
var mcVersion = libs.versions.minecraft.asProvider().get()
base {
    archivesName = "${modName}-forge-${mcVersion}"
}

minecraft {
    mappings channel: 'official', version: libs.versions.minecraft.asProvider().get()
    accessTransformer(file("src/main/resources/META-INF/accesstransformer.cfg"))

    reobf = false
    copyIdeResources = true

    runs {
        client {
            workingDirectory(project.file("run/" + name))
            args("--username", "Dev")

            property("forge.logging.console.level", "debug")
            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "${project.projectDir}/build/createSrgToMcp/output.srg")
            args("-mixin.config=${modId}.mixins.json")
        }

        server {
            workingDirectory(project.file("run/" + name))

            property("forge.logging.console.level", "debug")
            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "${project.projectDir}/build/createSrgToMcp/output.srg")
            args("-mixin.config=${modId}.mixins.json")
        }
    }
}

dependencies {
    minecraft(libs.forge)
    compileOnly(project(":common"))

    if (System.getProperty("idea.sync.active") != "true")
        annotationProcessor(variantOf(libs.mixin) { classifier("processor") })

//    implementation(libs.jopt.simple)
    // Hack fix for now, force jopt-simple to be exactly 5.0.4 because Mojang ships that version, but some transtive dependencies request 6.0+
    implementation('net.sf.jopt-simple:jopt-simple:5.0.4') { version { strictly '5.0.4' } }

}

mixin {
    add sourceSets.main, "${modId}.refmap.json"
    config "${modId}.mixins.json"
}

compileJava {
    source(project(":common").sourceSets.main.allSource)
}

sourcesJar {
    from project(":common").sourceSets.main.allSource
}

processResources {
    from project(":common").sourceSets.main.resources
    exclude("**/accesstransformer-nf.cfg")
}

task apiJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'api'

    include "hungteen/${modId}/api/**"

    // Sources included because of MinecraftForge/ForgeGradle#369
    from project(":common").sourceSets.main.allJava
    from(sourceSets.main.allJava)
    from(sourceSets.main.output)
}

artifacts {
    archives apiJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = modName
            version "${mcVersion}-${modVersion}-forge"
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}

publishMods {
    file = jar.archiveFile
    type = (modVersionType == "STABLE" ? STABLE : BETA)
    modLoaders.add("forge")
    displayName.set("${modName}-${project.version} for Forge $mcVersion")

    curseforge {
        projectId = curseProjectId
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")

        minecraftVersions.add(mcVersion)
        javaVersions.add(JavaVersion.VERSION_21)

        clientRequired = true
        serverRequired = true

        changelog = rootProject.file("docs/en_us/changelog.md").text
    }

    modrinth {
        projectId = modrinthId
        accessToken = providers.environmentVariable("MODRINTH_API_KEY")

        minecraftVersions.add(mcVersion)

        changelog = rootProject.file("docs/en_us/changelog.md").text
    }
}


sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}
